{"version":3,"file":"request.DsXktua-.js","sources":["../../../src/const/index.ts","../../../src/utils/token.ts","../../../src/utils/request.ts"],"sourcesContent":["export const KEY = 'SYH'\n","import { KEY } from '@/const'\n\nconst KET_TOKEN = KEY + '_YYY_TOKEN'\n\nconst Storage_KEY = 'YYY_STORAGE'\n/** 获取token */\nexport const getToken = () => {\n  return sessionStorage.getItem(KET_TOKEN) || ''\n}\n\n/** 设置token */\nexport const setToken = (token: string) => {\n  return sessionStorage.setItem(KET_TOKEN, token)\n}\n\n/** 删除token */\nexport const removeToken = () => {\n  return sessionStorage.removeItem(KET_TOKEN)\n}\n\n/** 清空全部临时存储 */\nexport const clearStorage = () => {\n  return sessionStorage.clear()\n}\n\n/** 获取指定Key的数据 */\nexport const getStorageByKey = (key: string) => {\n  const strKey = getKey(key)\n  const value = localStorage.getItem(strKey) || '1'\n  return parseInt(value, 10)\n}\n/** 设置指定Key的数据 */\nexport const setStorageByKey = (key: string, value: string) => {\n  const strKey = getKey(key)\n  localStorage.setItem(strKey, value)\n}\n/** 删除指定Key的数据 */\nexport const removeStorageByKey = (key: string) => {\n  const strKey = getKey(key)\n  localStorage.removeItem(strKey)\n}\n\nfunction getKey(key: string) {\n  return Storage_KEY + '__' + key\n}\n","import axios from 'axios'\nimport { getToken, removeToken } from './token'\nimport { ElMessage } from 'element-plus'\nimport { globalRouter } from '@/router'\n\n// 创建 Axios 实例\nconst axiosClient = axios.create({\n  baseURL: '/api/api', // 替换为你的 API 基础 URL\n  timeout: 10000, // 请求超时时间（毫秒）\n  headers: {\n    'Content-Type': 'application/json'\n  }\n})\n\n// 请求拦截器\naxiosClient.interceptors.request.use(\n  (config) => {\n    const token = getToken()\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`\n    }\n\n    return config\n  },\n  (error) => {\n    return Promise.reject(error)\n  }\n)\n\n// 响应拦截器\naxiosClient.interceptors.response.use(\n  (response) => {\n    // 返回数据而不是整个响应对象\n    return response.data\n  },\n  (error) => {\n    console.error('Error:', error)\n\n    if (error.response) {\n      const { status } = error.response\n      const { message } = error.response.data || '未知错误'\n\n      handleHttpError(status, message)\n    } else if (error.request) {\n      // 请求已发出，但没有收到响应\n      console.error('Request Error:', error.request)\n      ElMessage({\n        message: '请求超时或网络异常，请稍后再试。',\n        type: 'error'\n      })\n    } else {\n      // 其他错误\n      console.error('Error Message:', error.message)\n      ElMessage({\n        message: '发生了一个错误，请联系管理员。',\n        type: 'error'\n      })\n    }\n\n    return Promise.reject(error)\n  }\n)\n\n/**\n * 处理 HTTP 错误\n * @param {number} status - HTTP 状态码\n * @param {string} message - 错误消息\n */\nfunction handleHttpError(status: number, message: string) {\n  switch (status) {\n    case 401:\n      ElMessage({\n        message: '登录已失效，请重新登录！',\n        type: 'error'\n      })\n      // 这里可以添加跳转登录页的逻辑\n      globalRouter.replace({ name: 'Login' })\n      removeToken()\n      break\n    case 403:\n      ElMessage({\n        message: message || '您没有权限访问该资源。',\n        type: 'error'\n      })\n      break\n    case 404:\n      ElMessage({\n        message: message || '请求的资源未找到。',\n        type: 'error'\n      })\n      break\n    case 500:\n      ElMessage({\n        message: message || '服务器内部错误。',\n        type: 'error'\n      })\n      break\n    case 502:\n      ElMessage({\n        message: message || '网关错误。',\n        type: 'error'\n      })\n      break\n    case 503:\n      ElMessage({\n        message: message || '服务不可用，请稍后再试。',\n        type: 'error'\n      })\n      break\n    case 504:\n      ElMessage({\n        message: message || '网关超时。',\n        type: 'error'\n      })\n      break\n    default:\n      ElMessage({\n        message: message || '发生了一个未知错误。',\n        type: 'error'\n      })\n      break\n  }\n}\n\n/** http方法类型 */\ntype HttpMethods = 'GET' | 'POST' | 'PUT' | 'DELETE' | 'PATCH' | 'HEAD' | 'OPTIONS' | 'CONNECT' | 'TRACE'\n/**\n * 封装的请求函数\n * @param url - 请求的URL\n * @param HttpMethods - 请求的方法，默认为 GET\n * @param data - 请求的数据\n * @param option - 额外的配置选项\n */\ninterface RequestOptions {\n  [key: string]: any\n}\n\nasync function request<T>(url: string, method: HttpMethods, data: any = {}, options: RequestOptions = {}): Promise<T> {\n  try {\n    const response = await axiosClient({\n      url,\n      method,\n      data: method === 'GET' ? undefined : data,\n      params: method === 'GET' ? data : undefined,\n      ...options\n    })\n\n    return response as T\n  } catch (error) {\n    return Promise.reject(error)\n  }\n}\n\nexport default request\n"],"names":["KEY","KET_TOKEN","Storage_KEY","getToken","setToken","token","removeToken","getStorageByKey","key","strKey","getKey","value","setStorageByKey","axiosClient","axios","config","error","response","status","message","handleHttpError","ElMessage","globalRouter","request","url","method","data","options"],"mappings":"wJAAO,MAAMA,EAAM,MCEbC,EAAYD,EAAM,aAElBE,EAAc,cAEPC,EAAW,IACf,eAAe,QAAQF,CAAS,GAAK,GAIjCG,EAAYC,GAChB,eAAe,QAAQJ,EAAWI,CAAK,EAInCC,EAAc,IAClB,eAAe,WAAWL,CAAS,EAS/BM,EAAmBC,GAAgB,CACxC,MAAAC,EAASC,EAAOF,CAAG,EACnBG,EAAQ,aAAa,QAAQF,CAAM,GAAK,IACvC,OAAA,SAASE,EAAO,EAAE,CAC3B,EAEaC,EAAkB,CAACJ,EAAaG,IAAkB,CACvD,MAAAF,EAASC,EAAOF,CAAG,EACZ,aAAA,QAAQC,EAAQE,CAAK,CACpC,EAOA,SAASD,EAAOF,EAAa,CAC3B,OAAON,EAAc,KAAOM,CAC9B,CCtCA,MAAMK,EAAcC,EAAM,OAAO,CAC/B,QAAS,WACT,QAAS,IACT,QAAS,CACP,eAAgB,kBAAA,CAEpB,CAAC,EAGDD,EAAY,aAAa,QAAQ,IAC9BE,GAAW,CACV,MAAMV,EAAQF,EAAS,EACvB,OAAIE,IACKU,EAAA,QAAQ,cAAgB,UAAUV,CAAK,IAGzCU,CACT,EACCC,GACQ,QAAQ,OAAOA,CAAK,CAE/B,EAGAH,EAAY,aAAa,SAAS,IAC/BI,GAEQA,EAAS,KAEjBD,GAAU,CAGT,GAFQ,QAAA,MAAM,SAAUA,CAAK,EAEzBA,EAAM,SAAU,CACZ,KAAA,CAAE,OAAAE,GAAWF,EAAM,SACnB,CAAE,QAAAG,CAAY,EAAAH,EAAM,SAAS,MAAQ,OAE3CI,EAAgBF,EAAQC,CAAO,CAAA,MACtBH,EAAM,SAEP,QAAA,MAAM,iBAAkBA,EAAM,OAAO,EACnCK,EAAA,CACR,QAAS,mBACT,KAAM,OAAA,CACP,IAGO,QAAA,MAAM,iBAAkBL,EAAM,OAAO,EACnCK,EAAA,CACR,QAAS,kBACT,KAAM,OAAA,CACP,GAGI,OAAA,QAAQ,OAAOL,CAAK,CAAA,CAE/B,EAOA,SAASI,EAAgBF,EAAgBC,EAAiB,CACxD,OAAQD,EAAQ,CACd,IAAK,KACOG,EAAA,CACR,QAAS,eACT,KAAM,OAAA,CACP,EAEDC,EAAa,QAAQ,CAAE,KAAM,OAAA,CAAS,EAC1BhB,EAAA,EACZ,MACF,IAAK,KACOe,EAAA,CACR,QAASF,GAAW,cACpB,KAAM,OAAA,CACP,EACD,MACF,IAAK,KACOE,EAAA,CACR,QAASF,GAAW,YACpB,KAAM,OAAA,CACP,EACD,MACF,IAAK,KACOE,EAAA,CACR,QAASF,GAAW,WACpB,KAAM,OAAA,CACP,EACD,MACF,IAAK,KACOE,EAAA,CACR,QAASF,GAAW,QACpB,KAAM,OAAA,CACP,EACD,MACF,IAAK,KACOE,EAAA,CACR,QAASF,GAAW,eACpB,KAAM,OAAA,CACP,EACD,MACF,IAAK,KACOE,EAAA,CACR,QAASF,GAAW,QACpB,KAAM,OAAA,CACP,EACD,MACF,QACYE,EAAA,CACR,QAASF,GAAW,aACpB,KAAM,OAAA,CACP,EACD,KAAA,CAEN,CAeA,eAAeI,EAAWC,EAAaC,EAAqBC,EAAY,CAAI,EAAAC,EAA0B,GAAgB,CAChH,GAAA,CASK,OARU,MAAMd,EAAY,CACjC,IAAAW,EACA,OAAAC,EACA,KAAMA,IAAW,MAAQ,OAAYC,EACrC,OAAQD,IAAW,MAAQC,EAAO,OAClC,GAAGC,CAAA,CACJ,QAGMX,EAAO,CACP,OAAA,QAAQ,OAAOA,CAAK,CAAA,CAE/B"}